@startdef(id=PixiTHUMDER_Pipeline)
  class PixiTHUMDER_Pipeline {
    -InstStages_text: PIXI.Text
    -IF_text: PIXI.Text
    -ID_text: PIXI.Text
    -intEX_text: PIXI.Text
    -MEM_text: PIXI.Text
    -WB_text: PIXI.Text
    -faddEX_array: PIXI.Text[]
    -fmultEX_array: PIXI.Text[]
    -fdivEX_array: PIXI.Text[]
    -faddEX_count: any
    -fmultEX_count: any
    -fdivEX_count: any
    +reset(faddEX_count: number, fmultEX_count: number, fdivEX_count: number): void
    -initTexts(): void
    -drawText(object: PIXI.Text, coords: CoordsType): void
    -initArrows(): void
    -initBoxes(): void
    -drawBox(color: number, positionStart: CoordsType, text: string): void
    -drawLine(from: CoordsType, to: CoordsType): void
    -drawArrow(from: CoordsType, to: CoordsType): void
    +update_IF_text(value: string): void
    +update_ID_text(value: string): void
    +update_intEX_text(value: string): void
    +update_faddEX_text(count: number, value: string): void
    +update_fmultEX_text(count: number, value: string): void
    +update_fdivEX_text(count: number, value: string): void
    +update_MEM_text(value: string): void
    +update_WB_text(value: string): void
    +draw(): PIXI.Container
    +toString(): string
  }
@enddef

@startdef(id=Position)
  class Position {
    +row: any
    +col: any
    +toString(): string
  }
@enddef

@startdef(id=PixiTHUMDER_Table)
  class PixiTHUMDER_Table {
    +table: Map<string, PIXI.Container>
    -cellMaxWidth: any
    -cellMaxHeight: any
    -rowSeparation: any
    -columnSeparation: any
    -isDebug: false
    +getAllPositions(): Position[]
    +getAllRows(): number[]
    +getAllColumns(): number[]
    +deleteRow(row: number): void
    +deleteCol(col: number): void
    +deleteCell(row: number, col: number): boolean
    +clearCell(row: number, col: number): void
    +setCell(row: number, col: number, content: PIXI.Container): void
    +drawCell(row: number, col: number): void
    +draw(): PIXI.Container
    +existCell(row: number, col: number): boolean
    -getCell(row: number, col: number): PIXI.Container
  }
@enddef


@startdef(id=PixiTHUMDER_CycleClockDiagram)
  class PixiTHUMDER_CycleClockDiagram {
    +realStep: number
    +instructions: number
    -table: PixiTHUMDER_Table
    -tableSteps: PixiTHUMDER_Table
    -tableInstructions: PixiTHUMDER_Table
    -arrows: PIXI.Graphics[]
    -arrowsContainer: PIXI.Container
    -borderTitle: PIXI.Graphics
    -borderLeft: PIXI.Graphics
    -borderTop: PIXI.Graphics
    -stepToStart: number
    -last: number
    +borderTopWidth: number
    +borderLeftHeight: number
    +reset(): void
    -initTables(): void
    -drawArrow(arrowDirection: TypeArrowDirection, color?: number): void
    -drawBorders(): void
    -drawSteps(displayStep?: number): void
    -drawInstruction(textValue: string): void
    +nextStep(pipeline: TypePipeline, step?: number): void
    +addInstruction(text: string): void
    +addArrow(instructionArrow: TypeArrowDirection, color: number): void
    +moveLeft(): void
    +moveRight(): void
    +moveTop(): void
    +moveBottom(): void
    +debug(): void
    +draw(): PIXI.Container
    +toString(): string
    -{static} drawCycle(code?: TypePipelineStage | TypeStall): PIXI.Graphics
  }
@enddef
