@startuml
!theme plain
'hide class fields
'hide class method
'hide interface fields
'hide interface method

skinparam defaultFontName "JetBrains Mono"
skinparam linetype ortho

package Services #DDDDDD {
  class ElectronService {
    +ipcRenderer: Electron.IpcRenderer
    +webFrame: Electron.WebFrame
    +remote: Electron.Remote
    +childProcess: typeof childProcess
    +fs: typeof fs
    -_electron: any
    -electron: any
    +isElectronApp: boolean
    '+nativeImage: Electron.NativeImage
    +screen: Electron.Screen
    +shell: Electron.Shell
    +{static} serviceElectron(): "" | "browser" | "renderer" | "worker"
    +{static} isServer: boolean
    +{static} isElectronApp: boolean
    +{static} isMacOS: boolean
    +{static} isWindows: boolean
    +{static} isLinux: boolean
    +{static} isX86: boolean
    +{static} isX64: boolean
    +{static} debug: any
  }
  interface FileSystemItem {
  }
  interface InterfaceFileItem {
    +$key?: string
    +f_id: string
    +e1_uid: string
    +key: string
    +pathKeys: string[]
    +path: string
    +name: string
    +content: string
    +description: string
    +dateModified: Date
    +size: number
    +isDirectory: boolean
    +hasSubDirectories: boolean
    +thumbnail: string
    +dataItem: any
  }
  class THUMDER_FileItem extends FileSystemItem implements InterfaceFileItem {
      +$key: string
      +content: string
      +description: string
      +e1_uid: string
      +f_id: string
  }
  class FileSystemService {
      +items: THUMDER_FileItem[]
      -updateUI$: Subject<void>
      -subscription: Subscription
      +fileSystemStorageService: FileSystemStorageService
      +init(): Promise<void>
      +getUpdateUIObservable(): Observable<void>
      +getItems(path: FileSystemItem): Promise<THUMDER_FileItem[]>
      +createDirectory(parentDirectory: FileSystemItem, name: string): Promise<THUMDER_FileItem>
      +createFile(item: FileSystemItem, extension: string): Promise<boolean>
      +updateCategory(directory: FileSystemItem, selectedItems: FileSystemItem[], newCategory: any, viewArea: "navPane" | "itemView"): Promise<boolean>
      +editFileItem(updateFileItem: THUMDER_FileItem, $key: string): Promise<void>
      +renameItem(item: FileSystemItem, newName: string): Promise<THUMDER_FileItem>
      +deleteItem(item: FileSystemItem): Promise<void>
      +moveItem(item: FileSystemItem, destinationDirectory: FileSystemItem): Promise<any>
      +uploadFileChunk(fileData: File, uploadInfo: UploadInfo, destinationDirectory: FileSystemItem): Promise<any>
      +downloadItem(items: FileSystemItem[]): Promise<void>
      -setList_FileItems(items: THUMDER_FileItem[]): Promise<void>
      -updateLocalItems(): Promise<void>
      -{static} transform_InterfaceFileItem_to_THUMDER_FileItem(interfaceFileItem: InterfaceFileItem): THUMDER_FileItem
  }
  class FileSystemStorageService {
      -dbFileItemsPath: "/fileitems"
      -httpClient: HttpClient
      -afs: Firestore
      +isInitialize(): Promise<boolean>
      +queryFileFromUser(filename: string): Promise<QuerySnapshot<DocumentData>>
      -queryAllFilesFromUser(): Query<DocumentData>
      -collectionFileItems(): Promise<QuerySnapshot<DocumentData>>
      +generateDefaultFiles(): Promise<number>
      +getAllFilesFromFirestoreAsObservable(): Observable<THUMDER_FileItem[]>
      +createFileItem(fileItem: THUMDER_FileItem): Promise<boolean>
      +deleteFileItem($key: string): Promise<boolean>
      +updateFileItem($key: string, fileItem: THUMDER_FileItem): Promise<boolean>
      +FileItem_Documents_valueChanges(id: any): Observable<THUMDER_FileItem>
      +FileItem_Documents_snapShotChanges(id: any): Observable<DocumentSnapshot<THUMDER_FileItem>>
      +FileItems_Collections_valueChanges(): Observable<THUMDER_FileItem[]>
      +FileItems_Collections_snapShotChanges(): Observable<DocumentChange<THUMDER_FileItem>[]>
      +createNewDocument(): { ref: DocumentReference<DocumentData>; id: string; }
      +getAllFilesFromFirestore(): Promise<QuerySnapshot<THUMDER_FileItem>>
      +getFiles(): Promise<THUMDER_FileItem[]>
  }

  class Globals {
    +showDebug: boolean;
  }

  class SocketProviderConnectService {
    +socketID: string
    -connect$: Subject<"Connect" | "Disconnect">
    -publicMessage$: Subject<unknown>
    -privateMessage$: Subject<unknown>
    +connectObservable: Observable<"Connect" | "Disconnect">
    +publicMessageObservable: Observable<unknown>
    +privateMessageObservable: Observable<unknown>
    +socketIO: Socket
    -translate: TranslateService
    -toast: ToastrService
    +updateSocketURl(): void
    +emitMessage(event?: string, payload?: {}, callback?: (...response: any[]) => void): void
    -{static} handleErrors(err: any): void
  }

  FileSystemService --> FileSystemStorageService
'  ElectronService -[hidden]- FileSystemService
'  FileSystemStorageService -[hidden]- Globals
'  Globals -[hidden]- SocketProviderConnectService
}

@enduml
